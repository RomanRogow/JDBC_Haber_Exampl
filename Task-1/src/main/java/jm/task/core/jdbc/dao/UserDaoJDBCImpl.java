package jm.task.core.jdbc.dao;

import com.mysql.cj.x.protobuf.MysqlxCrud;
import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {
    Connection connection = Util.getConnection();

    public UserDaoJDBCImpl() {
    }

    public void createUsersTable() {
        try (Statement stmt = connection.createStatement()){
            stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Users(id int PRIMARY KEY" +
                    " GENERATED BY DEFAULT AS IDENTITY ," +
                    "name VARCHAR(50)," +
                    "lastName VARCHAR(50)," +
                    "age INT)");
            System.out.println("Таблица создана!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public void dropUsersTable() {
        try (Statement statement = connection.createStatement()){
            statement.executeUpdate("DROP TABLE IF EXISTS Users");
            System.out.println("Произошло удаление таблицы! Если, конечно таковая была!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }
    public void saveUser(String name, String lastName, byte age) {
        try (PreparedStatement prepStmt = connection.prepareStatement("INSERT INTO  Users (name,lastName,age) VALUES (?,?,?)")){
            prepStmt.setString(1,name);
            prepStmt.setString(2,lastName);
            prepStmt.setShort(3,age);
            prepStmt.executeUpdate();
            System.out.println("User " + name + " создан!");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public void removeUserById(long id) {
        try (PreparedStatement preper = connection.prepareStatement("DELETE FROM Users WHERE id = ?")){
            preper.setInt(1, (int) id);
            int delitColum = preper.executeUpdate();
            System.out.println(delitColum + "   " + id + " - Удалено!");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<User> getAllUsers() {
        List<User> allUsers = new ArrayList<>();
        try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Users")){
            ResultSet resQury = statement.executeQuery();
            while (resQury.next()){
                User user = new User();
                user.setId(resQury.getLong("id"));
                user.setName(resQury.getString("name"));
                user.setLastName(resQury.getString("lastName"));
                user.setAge(resQury.getByte("Age"));
                allUsers.add(user);
                System.out.println(user);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        if (allUsers.isEmpty()) {
            System.out.println("Пользователей  в  базе  данных  нет.");
        }
        return allUsers;
    }


    public void cleanUsersTable() {
        try (PreparedStatement pr = connection.prepareStatement("" +
                "TRUNCATE TABLE Users")){
             pr.executeUpdate();
            System.out.println("Таблица очищена!");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

}
